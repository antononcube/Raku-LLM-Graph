use v6.d;
use Test;
use LLM::Graph;

plan *;

subtest {
    my $valid-rules = {
        a => "a string",
        b => -> { "callable" },
        c => { 'eval-function' => 'eval', 'input' => 'in' },
        d => { 'llm-function' => 'f', 'test-function' => -> { True } },
        e => <prompt1 prompt2 prompt3>
    };

    my $g1 = LLM::Graph.new($valid-rules);
    ok $g1.rules-valid(), 'valid rules should validate';
    is $g1.rule-errors().elems, 0, 'no errors for valid rules';
    is $g1.graph.isa(Whatever), True, 'default graph is empty';

}, 'valid rules';

subtest {
    my $invalid-types = {
        n1 => 123,
        n2 => [1, 2, 3],
    };
    my $g2 = LLM::Graph.new($invalid-types);
    is $g2.rules-valid(), False, 'invalid types should fail validation';
    like $g2.rule-errors().join("\n"), / 'Rule \'n1\' has invalid type: Int' | n2 /, 'errors mention invalid types';

}, 'invalid types';

subtest {
    my $invalid-keys = {
        m1 => { 'bad-key' => 'x', 'input' => 'y' },
    };
    my $g3 = LLM::Graph.new($invalid-keys);
    ok not $g3.rules-valid(), 'map with invalid keys should fail';
    like $g3.rule-errors().join("\n"), / 'invalid keys: bad-key' /, 'error lists the invalid key';

}, 'invalid keys';

subtest {
    my $mixed = {
        ok1 => "ok",
        ok2 => -> { 1 },
        bad1 => { 'unknown' => 'v' },
        bad2 => 0,
    };
    my $g4 = LLM::Graph.new($mixed);
    ok not $g4.rules-valid(), 'mixed valid/invalid should fail';
    is $g4.rule-errors().elems, 3, 'two rules should be reported as errors';
}, 'mixed';

subtest {
    # Named-parameter constructor
    my %rules = a => 's';
    my $g5 = LLM::Graph.new(:%rules);
    ok $g5.rules-valid(), 'named-parameter constructor with valid rules works';
    is $g5.graph.isa(Whatever), True, 'named-parameter constructor sets default graph';
}, 'named parameter';

subtest {
    my $rules = {
        d => { 'llm-function' => 'f', 'test-function' => 'say Yes' }
    };

    my $g1 = LLM::Graph.new($rules);
    is $g1.rules-valid(), False, 'should not validate';
    is $g1.rule-errors().elems, 1, 'an error should registered';
    is (so $g1.rule-errors().head ~~ / test . function /), True, 'expected error message';

}, 'invalid test-function';

done-testing;
